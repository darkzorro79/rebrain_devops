# Описываем две стадии - test и deploy
stages:
- test
- deploy

# Задача на запуск линтера
test:lint:
  # Относится к стадии тестирования
  stage: test
  # Разрешаем фейлится данной задаче
  allow_failure: true
  before_script:
    # Устанавливаем зависимости для сборки
    - apt-get update && apt-get install -y curl wget python3-venv build-essential libpq-dev python3-dev
    # Создаем виртуальное окружение
    - python3 -m venv venv
    # Активируем виртуальное окружение
    - source venv/bin/activate
    # Устанавливаем дополнительно pylint
    - pip3 install pylint
  script:
    # Устанавливаем зависимости приложения
    - pip3 install -r requirements.txt
    # Запускаем проверку кода
    - pylint *.py

# Задача на выливку приложения
# Задачи на сборку у нас нет, потому что собирать нечего - у нас уже имеется готовый артефакт - cleaner.py
# Устанавливать зависимости заранее мы не можем, потому что иначе они будут установлены на агента CI системы,
# а не на целевом сервере, где будет запускаться скрипт worker.
deploy:app:
  # Относится к стадии deploy
  stage: deploy
  # Устанавливаем ssh агент и импортируем ключ аналогично back приложению
  before_script:
  - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
  - eval $(ssh-agent -s)
  - cat ${SSH_PRIVATE_KEY}
  - cp ${SSH_PRIVATE_KEY} /tmp/ssh_key
  - echo >> /tmp/ssh_key  # добавляем пустую строку
  - chmod 400 /tmp/ssh_key
  - ssh-add /tmp/ssh_key
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  - ssh-keyscan -H ${APP_HOST} >> ~/.ssh/known_hosts
  script:
    # Копируем наш скрипт и список зависимостей на целевой сервер
    - scp cleaner.py requirements.txt worker@$APP_HOST:/tmp
    # Меняем путь назначения на /opt/worker
    - ssh worker@$APP_HOST 'sudo systemctl stop worker && source /opt/worker/venv/bin/activate && pip3 install -r /tmp/requirements.txt && mv /tmp/requirements.txt /tmp/cleaner.py /opt/worker && sudo systemctl start worker'